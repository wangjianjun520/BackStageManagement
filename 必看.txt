formItems.js

/**
 * 查询组件“集散组件”
 * by zhangxinyue
 * create 2020.08.19
 */
import React from 'react';
import { DATA_ENTRY, InputC, InputNumberC,SelectC,TreeSelectC,SingleDate,ComplexDateC,RangeDateC} from '../form';
import { ProductGroupTreeC, ProductListC, ProductGroupSepC,SecuritiesCodeC } from '../business'

const FormItems = (props) => {
  switch (props.type) {
    case DATA_ENTRY.INPUT: return <InputC {...props} />;
    case DATA_ENTRY.INPUTNUMBER: return <InputNumberC {...props}/>;
    case DATA_ENTRY.SELECT: return <SelectC {...props}/>;
    case DATA_ENTRY.TREESELECT: return <TreeSelectC {...props}/>;
    case DATA_ENTRY.SINGLEDATE: return <SingleDate {...props}/>;
    case DATA_ENTRY.COMPLEXDATE: return <ComplexDateC {...props}/>;
    case DATA_ENTRY.RANGEDATE: return <RangeDateC {...props}/>;
    case DATA_ENTRY.PRODUCTGROUPTREE: return <ProductGroupTreeC {...props} />;
    case DATA_ENTRY.PRODUCTLIST: return <ProductListC {...props} />;
    case DATA_ENTRY.PRODUCTGROUPSEP: return <ProductGroupSepC {...props} />;
    case DATA_ENTRY.SECURITIESCODE: return <SecuritiesCodeC {...props} />;
    default: return <InputC {...props} />;
  }
};

export default FormItems;


index.js
/**
 * 查询组件
 * by zhangxinyue
 * create 2020.08.19
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Row, Col, Form} from 'antd';
import _ from 'lodash';
import { DATA_ENTRY } from '../form';
import { PrimaryC, PrimaryGhostC} from '../button';
import FormItems from './formItems';
import style from './style.less';

/**
 * 每一项最小宽度为312px
 * 一行最多4项
 * 当组件宽度小于4*312=1248px时，自动换行
 * 当组件宽度大于1248px时，展示4项，自动扩充
 */

class AdvancedSearch extends Component {
    // props默认值
  static defaultProps = {
    allowClear: true,           // 默认显示“重置”按钮
    allowMore: false,           // 默认不支持“展开/收起”按钮
    dataSource: [],             // 查询条件数据源
    moreData: [],               // 当allowMore为true时，展开的查询条件
    onQuery: () => {},          // 点击“查询”时，向外抛出查询数据
    onClear: () => {},          // 点击“清除”时，抛出事件
    resultIncludeNull: false,   // 默认在onQuery事件中将未设置条件移除
    queryDisabled:false,        // 默认查询按钮不是disable状态
    buttonText:'查询',          // 默认按钮文本是“查询”
  }

  // 生成查询条件
  getFields() {
    const { dataSource } = this.props;

    const children = [];
    let totalItems = dataSource.length;   // 元素总数量
    // 遍历数组，将数据转换成可展示的html
    dataSource.forEach((item, index) => {
      switch (item.type){
        case DATA_ENTRY.COMPLEXDATE:   // 当组件类型为COMPLEXDATE，需要特殊处理占位
          children.push(
            <Col span={12} key={index}>
              {/* 该处 this.props.form 不是从父组件传入，而是通过Form.create()传入 */}
              <FormItems {...item} form={this.props.form}/>
            </Col>,
          );
          totalItems += 1;  // 复杂日期期间下拉占两位 
          break;
        default: 
          // 查询条件
          children.push(
            <Col span={6} key={index}>
              <FormItems {...item} form={this.props.form} />
            </Col>,
          );
      }
    });

    // 按钮
    if(totalItems % 4 === 0){
      children.push(
        <Col span={24} key={children.length}>
          <div style={{ width: '97.9%', display:'flex',flexDirection:'row-reverse' }}>
            {this.defineButton()}
          </div>
        </Col>,
      );
    }else{
      children.push(
        <Col span={6} key={children.length}>
          <div style={{ width: 22/24*100 + '%', display:'flex',flexDirection:'row-reverse'}}>
            {this.defineButton()}
          </div>
        </Col>,
      );
    }
    
    return children;
  }

  // 定义操作按钮
  defineButton = () => {
    const { allowClear, queryDisabled,buttonText } = this.props;
    return (<Form.Item>
      <PrimaryC 
        htmlType="submit" 
        disabled={queryDisabled} 
        title={buttonText}
      />
      {
        allowClear &&
        <PrimaryGhostC 
            title="重置"
            style={{ marginLeft: '16px', borderRadius: '2px' }}
            onClick={this.handleReset}
        />
      }
    </Form.Item>);
  }

  // “查询”按钮，抛出查询条件
  handleSearch = (e) => {
    e.preventDefault();
    this.props.form.validateFields((err, values) => {
      if(!this.props.resultIncludeNull){
        // 删除用户未设置的条件
        const removeKeys = [];          // 保存要删除的条件key值
        Object.getOwnPropertyNames(values).forEach((key) => {
          const value = values[key];
          if (value === undefined || value === null || value === '' || (Array.isArray(value) && value.length == 0)) {
            removeKeys.push(key);   // 找出未设置的条件
          }
        });
        // 删除空条件
        for (let i = 0; i < removeKeys.length; i++) {
          delete values[removeKeys[i]];
        }
      }
            
      this.props.onQuery(values);       // 抛出查询条件
    });
  }

  // “重置”按钮
  handleReset = () => {
    this.props.form.resetFields();        // 重置条件

    // 遍历数组，将数据转换成可展示的html
    this.props.dataSource.forEach((item, index) => {
      switch (item.type){
        case DATA_ENTRY.RANGEDATE:   // 当组件类型为RANGEDATE，重置需特殊处理
          item.self && item.self.reset();
          break;
        case DATA_ENTRY.COMPLEXDATE:
          item.self && item.self.reset();
      }
    });

    this.props.onClear();                 // 抛出点击“重置”按钮事件
  }

  render() {
    return (
      <Form className={style.query} onSubmit={this.handleSearch}>
        <Row justify="space-around">{this.getFields()}</Row>
      </Form>
    );
  }
}

// props类型
AdvancedSearch.propsTypes = {
  allowClear: PropTypes.bool,          // 设置是否展示“重置”按钮
  dataSource: PropTypes.array,         // 查询条件数据源
  onQuery: PropTypes.func,             // 点击“查询”时，向外抛出查询数据
  onClear: PropTypes.func,             // 点击“重置”时，抛出事件
  resultIncludeNull: PropTypes.bool,   // 设置onQuery事件抛出的结果是否包含未设置的
  queryDisabled: PropTypes.bool,       // 设置查询按钮的失效状态
  buttonText: PropTypes.string,        // 按钮文本
};


export default Form.create()(AdvancedSearch);



style.less
@import '../../css/colorVar.less';
.query{
    background-color: @section_bg;
    border-radius: 2px;
    box-shadow: 0 2px 4px 0 @section_shadow;
    padding-top: 15px;
}



