import React from 'react';
import PropTypes from 'prop-types';
import { Modal } from 'antd';

class ModalC extends React.Component {
  // props默认值
  static defaultProps = {
    // Modal 完全关闭后的回调	function	无
    afterClose: () => { },
    // 取消按钮文字	string|ReactNode
    cancelText: '取消',
    // 垂直居中展示 Modal	Boolean
    centered: true,
    // 是否显示右上角的关闭按钮 boolean
    closable: true,
    // 自定义关闭图标	ReactNode
    closeIcon: undefined,
    // 确定按钮 loading	boolean
    confirmLoading: undefined,
    // 关闭时销毁 Modal 里的子元素	boolean	
    destroyOnClose: false,
    // 底部内容，当不需要默认底部按钮时，可以设为 footer={null}	string|ReactNode	确定取消按钮
    footer: undefined,
    // 强制渲染 Modal	boolean	
    forceRender: false,
    // 指定 Modal 挂载的 HTML 节点, false 为挂载在当前 dom:	HTMLElement | () => HTMLElement | Selectors | false	
    getContainer: false,
    // 是否支持键盘 esc 关闭	boolean	
    keyboard: true,
    // 是否展示遮罩	Boolean	
    mask: true,
    // 点击蒙层是否允许关闭	boolean	
    maskClosable: true,
    // 遮罩样式	object	
    maskStyle: {},
    // 确认按钮文字	string|ReactNode	
    okText: '确定',
    // 确认按钮类型	string	
    okType: 'primary',
    // ok 按钮 props	ButtonProps
    okButtonProps: undefined,
    // cancel 按钮 props	ButtonProps	
    cancelButtonProps: undefined,
    // 可用于设置浮层的样式，调整浮层位置等	object
    style: undefined,
    // 标题	string|ReactNode	
    title: undefined,
    // 对话框是否可见	boolean	
    visible: undefined,
    // 主体宽度	string|number	
    width: 800,
    // 对话框外层容器的类名	string
    wrapClassName: undefined,
    // 设置 Modal 的 z-index	Number	
    zIndex: 1000,
    // 点击遮罩层或右上角叉或取消按钮的回调	function(e)
    onCancel: () => { },
    // 点击确定回调	function(e)
    onOk: () => { },
    // 主体高度	string|number	
    height: false,
  }


  render() {
    const {
      width,
      height,
      children,
      ...otherProps
    } = this.props
    const maxHeight = document.body.offsetHeight - 120
    let bodyHeight
    let contentHeight
    
    if(height){
      bodyHeight = maxHeight > height ? height : maxHeight
      contentHeight = bodyHeight+50
    }

    const props = {
      ...otherProps,
      width: width + 40,
      bodyStyle: {
        height:contentHeight,
        maxHeight,
      },
      style: {}
    }
    return (
      <Modal {...props} className={this.props.className}>
        { children }
      </Modal>
    );
  }
}

// props类型
ModalC.propsTypes = {
  // Modal 完全关闭后的回调	function	无
  afterClose: PropTypes.func,
  // 取消按钮文字	string|ReactNode
  cancelText: PropTypes.string,
  // 垂直居中展示 Modal	Boolean
  centered: PropTypes.bool,
  // 是否显示右上角的关闭按钮 boolean
  closable: PropTypes.bool,
  // 自定义关闭图标	ReactNode
  closeIcon: PropTypes.object,
  // 确定按钮 loading	boolean
  confirmLoading: PropTypes.bool,
  // 关闭时销毁 Modal 里的子元素	boolean	
  destroyOnClose: PropTypes.bool,
  // 底部内容，当不需要默认底部按钮时，可以设为 footer={null}	string|ReactNode	确定取消按钮
  footer: PropTypes.string,
  // 强制渲染 Modal	boolean	
  forceRender: PropTypes.bool,
  // 指定 Modal 挂载的 HTML 节点, false 为挂载在当前 dom:	HTMLElement | () => HTMLElement | Selectors | false	
  getContainer: PropTypes.bool,
  // 是否支持键盘 esc 关闭	boolean	
  keyboard: PropTypes.bool,
  // 是否展示遮罩	Boolean	
  mask: PropTypes.bool,
  // 点击蒙层是否允许关闭	boolean	
  maskClosable: PropTypes.bool,
  // 遮罩样式	object	
  maskStyle: PropTypes.object,
  // 确认按钮文字	string|ReactNode	
  okText: PropTypes.string,
  // 确认按钮类型	string	
  okType: PropTypes.string,
  // ok 按钮 props	ButtonProps
  okButtonProps: PropTypes.object,
  // cancel 按钮 props	ButtonProps	
  cancelButtonProps: PropTypes.object,
  // 可用于设置浮层的样式，调整浮层位置等	object
  style: PropTypes.object,
  // 标题	string|ReactNode	
  title: PropTypes.string,
  // 对话框是否可见	boolean	
  visible: PropTypes.bool,
  // 内部宽度	string|number	
  width: PropTypes.number,
  // 对话框外层容器的类名	string
  wrapClassName: PropTypes.string,
  // 设置 Modal 的 z-index	Number	
  zIndex: PropTypes.number,
  // 点击遮罩层或右上角叉或取消按钮的回调	function(e)
  onCancel: PropTypes.func,
  // 点击确定回调	function(e)
  onOk: PropTypes.func,
  // 内部高度	string|number	
  height: PropTypes.number,
  className: PropTypes.object,
};

export default ModalC;





import TableC from './table';

export {
    TableC,
}



import React from 'react';
import PropTypes from 'prop-types';
import { Table, Popconfirm, Icon, Spin } from 'antd';
import PrimaryGhostC from '../button/primaryGhost';
import accounting from 'accounting';

class TableC extends React.Component {
  // props默认值
  static defaultProps = {
    columns: undefined,
    dataSource: undefined,
    defaultCurrent: 1,     // 默认第一页
    total: 0,              // 默认共0条数据
    pageSize: 20,          // 默认一页20条
    pageSizeOptions: ['10', '20', '50', '100'],// 默认可选的一页条数
    onShowSizeChange: (current, size) => {},   // pageSize变化时的回调
    onPageChange: (page, pageSize) => {},      // 页码改变的回调，参数是改变后的页码及每页条数
    scroll: undefined,                         // 横向或纵向滚动条
    hidePage: false,                           // 默认不隐藏页码
    width: '100%',                             // 默认占父容器100%
    onChange:()=>{},                           // 表格所有的操作变化时 回调
    rowKey:'' ,                                // 设置唯一的key
  }

  render() {
    let {columns, dataSource,total,defaultCurrent,pageSize,pageSizeOptions,onShowSizeChange,onPageChange,scroll, hidePage,width,onChange,rowKey} = this.props;
    columns && columns.forEach((element,index) => {
      // 为每一列添加dataIndex
      element.dataIndex = element.key;
      // 设置最后一列居右
      if(index == columns.length - 1){
        element.align = 'right';
      }
      // 数字居右
      if(element.type === 'number'){
        element.align = 'right';
      }
      // 金钱（千分位格式，默认保留2位小数，支持通过toFixed修改保留位数）
      if(element.type === 'money'){
        element.align = 'right';
        if(element.render === undefined){
          element.render = (text, record, index) => {
            if(text === null || text === undefined || text === ''){
              return '--';
            }else{
              return accounting.formatNumber(Number(text), element.toFixed ? element.toFixed : 2);
            }            
          }
        }
      }
      // 比率（%格式，默认保留2位小数，支持通过toFixed修改保留位数）
      if(element.type === 'rate'){
        element.align = 'right';
        if(element.render === undefined){
          element.render = (text, record, index) => {
            if(text === null || text === undefined || text === ''){
              return '--';
            }else{
              // NaN: Not a Number
              // isNaN()的缺点就在于 null、空格以及空串会被按照0来处理
              if(isNaN(text)){
                return text;
              }else{
                return (Number(text) * 100).toFixed(element.toFixed ? element.toFixed : 2) + '%';
              }
            }
          }
        }
      }
      // 处理所有没有值的情况
      if(element.render === undefined){
        element.render = (text, record, index) => text ? text : '--';
      }
      // 操作列
      if(element.type === 'operate'){
        const operates = element.operates;
        element.render = (text, record, index) => {
          return (
            <div>
              {
                operates.map((item,index) => {
                  const rules = item.rules;
                  let hide = true;
                  let disabled = true;
                  // 默认同字段，条件之间是或的关系，不同字段，条件之间是与关系
                  // 处理隐藏逻辑
                  if(rules && rules.hide){
                    rules.hide.forEach(eachRule => {
                      // 处理不同字段之间的与关系
                      let value = record[eachRule.key];
                      let compare = eachRule.value;
                      let ralation = eachRule.ralation;
                      let tag = false;
                      for(let i = 0; i < compare.length; i++){
                        switch(ralation[i]){
                          case '=':
                            if(value === compare[i]) tag = true;
                            break;
                          case '!=':
                            if(value !== compare[i]) tag = true;
                            break
                        }
                      }
                      if(tag === false) hide = false;
                    })
                  }else{
                    hide = false;
                  }
                  // 处理禁用逻辑
                  if(rules && rules.disabled){
                    rules.disabled.forEach(eachRule => {
                      // 处理不同字段之间的与关系
                      let value = record[eachRule.key];
                      let compare = eachRule.value;
                      let ralation = eachRule.ralation;
                      let tag = false;
                      for(let i = 0; i < compare.length; i++){
                        switch(ralation[i]){
                          case '=':
                            if(value === compare[i]) tag = true;
                            break;
                          case '!=':
                            if(value !== compare[i]) tag = true;
                            break
                        }
                      }
                      if(tag === false) disabled = false;
                    })
                  }else{
                    disabled = false;
                  }

                  if(item.title === '删除'){
                    return (
                      !hide && <Popconfirm 
                        key={index} 
                        title="确定删除？" 
                        icon={<Icon type="question-circle-o"/>} 
                        onConfirm={()=> item.onClick(record, index)}
                        disabled={disabled}
                      > 
                        <a href="#" disabled={disabled}>删除</a> 
                      </Popconfirm>
                    )
                  }else{
                    return (
                      !hide && <a 
                        key={index} 
                        onClick={()=> item.onClick(record, index)}
                        disabled={disabled}
                      >
                        {item.title}
                      </a>
                    )
                  }
                })
              }
            </div>
          )
        }
      }
    });

    let initStatus = columns && dataSource; // 标记是否达到初始化状态(true:可以初始化表格，false：还未获取到数据)
    
    return (
      <div style={{width:width, textAlign:'center' }}>
        <Spin spinning={!initStatus} tip="加载中...">
          {
            initStatus && <Table 
              columns={columns}
              dataSource={dataSource}
              scroll={scroll}
              onChange={onChange}
              rowKey={rowKey}
              pagination={hidePage ? false : {
                total: total,                                 // 数据总数
                showTotal: totalNum => `共计 ${totalNum} 条`, // 用于显示数据总量和当前数据顺序
                defaultCurrent,                               // 默认当前页数
                pageSize,                                     // 每页条数
                pageSizeOptions: pageSizeOptions,             // 指定每页可以显示多少条
                showSizeChanger: true,                        // 是否可以改变 pageSize
                onShowSizeChange: onShowSizeChange,           // pageSize 变化的回调
                hideOnSinglePage: false,                      // 只有一页时，不隐藏分页
                onChange: onPageChange,
                showQuickJumper:{
                  goButton: (
                    <PrimaryGhostC 
                      title='确定'
                      style={{marginLeft:'10px'}}
                    /> 
                  )
                },
              }}
          />
          }
        </Spin>
      </div>
    );
  }
}

// props类型
// columns或dataSource为undefined时，为loading状态，为空数组时，显示“暂无数据”
TableC.propsTypes = {
  columns: PropTypes.array,         // 列信息(title和key是必填)（支持设置三类type:1)money 2)number 3)rate 4)operate，其他有关样式上的需求，自行添加render）
  dataSource: PropTypes.array,      // 数据源
  defaultCurrent: PropTypes.number, // 当前页码
  total: 0,                         // 数据总量
  pageSize: 20,                     // 一页数量量
  pageSizeOptions: PropTypes.array, // 一页数据量的可选值
  onShowSizeChange: (current, size) => {},// pageSize变化时的回调
  onPageChange: (page, pageSize) => {},   // 页码改变的回调，参数是改变后的页码及每页条数
  scroll: undefined,                      // 横向或纵向滚动条
  hidePage: false,                        // 默认不隐藏页码
  width: PropTypes.string,                // 表格宽度
  onChange:()=>{},                        // 表格所有的操作变化时 回调
  rowKey:PropTypes.string                 // 设置唯一的key
};

export default TableC;









